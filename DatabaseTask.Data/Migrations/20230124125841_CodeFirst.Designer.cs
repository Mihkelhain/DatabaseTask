// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20230124125841_CodeFirst")]
    partial class CodeFirst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseTask.Core.Domain.ConstructionCompany", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId");

                    b.ToTable("ConstructionCompanies");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employees", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialistation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Projects", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConstructionCompanyProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Payment")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("ConstructionCompanyProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Worksites", b =>
                {
                    b.Property<Guid>("WorkSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeesNeeded")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkSiteId");

                    b.HasIndex("ProjectId1");

                    b.ToTable("WorkSites", (string)null);
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employees", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Projects", "projectId")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("projectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Projects", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.ConstructionCompany", null)
                        .WithMany("Projects")
                        .HasForeignKey("ConstructionCompanyProjectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Worksites", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Projects", "ProjectId")
                        .WithMany("Worksites")
                        .HasForeignKey("ProjectId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectId");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.ConstructionCompany", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Projects", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Worksites");
                });
#pragma warning restore 612, 618
        }
    }
}
